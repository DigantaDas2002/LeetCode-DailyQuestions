class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
     Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> dp = new ArrayList<>();
        
        // Initialize dp list with empty lists
        for (int i = 0; i < n; i++) {
            dp.add(new ArrayList<>());
        }
        
        // Base case: every number is a subset of size 1
        for (int i = 0; i < n; i++) {
            dp.get(i).add(nums[i]);
        }

        List<Integer> result = new ArrayList<>();
        
        // Dynamic programming to find the largest divisible subset
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && dp.get(i).size() < dp.get(j).size() + 1) {
                    dp.set(i, new ArrayList<>(dp.get(j)));
                    dp.get(i).add(nums[i]);
                }
            }
            if (dp.get(i).size() > result.size()) {
                result = dp.get(i);
            }
        }
        
        return result;   
    }
}
