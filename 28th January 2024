class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
         int m = matrix.length;
        int n = matrix[0].length;
        int[][] prefixSum = new int[m + 1][n + 1];

        // Compute the prefix sum matrix
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                prefixSum[i][j] = matrix[i - 1][j - 1] + prefixSum[i - 1][j] + prefixSum[i][j - 1] - prefixSum[i - 1][j - 1];
            }
        }

        int count = 0;

        // Iterate through all possible submatrices
        for (int topRow = 1; topRow <= m; topRow++) {
            for (int botRow = topRow; botRow <= m; botRow++) {
                for (int leftCol = 1; leftCol <= n; leftCol++) {
                    for (int rightCol = leftCol; rightCol <= n; rightCol++) {
                        // Calculate the sum of the submatrix using the prefix sum matrix
                        int sum = prefixSum[botRow][rightCol] - prefixSum[topRow - 1][rightCol]
                                - prefixSum[botRow][leftCol - 1] + prefixSum[topRow - 1][leftCol - 1];

                        // If the sum is equal to the target, increment the count
                        if (sum == target) {
                            count++;
                        }
                    }
                }
            }
        }

        return count;
    }
}
